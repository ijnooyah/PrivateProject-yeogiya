<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.yj.yeogiya.board">

<!-- ************CREATE************ -->
	<!-- 1. board -->
	<!-- 1-1. tbl_board insert -->
	<insert id="insertBoard" parameterType="Board">
		<selectKey keyProperty="board_no" resultType="int" order="BEFORE">
 			SELECT seq_board_no.NEXTVAL FROM dual
 		</selectKey>
		insert into tbl_board 
			 (board_no, user_id, board_title, board_content,
			 sort_local, sub_local, sort_board, sort_place, has_img)
		values 
			(#{board_no}, #{user_id}, #{board_title}, #{board_content},
			#{sort_local}, #{sub_local}, #{sort_board}, 
			#{sort_place, jdbcType=VARCHAR}, #{has_img})
	</insert>
	
	<!-- 1-2. tag -->
	<!-- tbl_tag insert -->
	<insert id="insertTag" parameterType="java.util.List">
	    INSERT INTO tbl_tag (tag_no, tag_name)
	    SELECT SEQ_TAG_NO.NEXTVAL, A.* FROM (
	    <foreach item="item" collection="list" separator="UNION ALL" >
	        select #{item.tag_name} TAG_NAME
	        from dual
	         WHERE NOT EXISTS (
			  SELECT TAG_NAME FROM tbl_tag
			  WHERE TAG_NAME = #{item.tag_name}
			)
	    </foreach>) A
	</insert>
	<!-- tbl_board_tag insert -->
	<insert id="insertBoardTag"  parameterType="java.util.List">
		INSERT INTO 
			tbl_board_tag (board_no, tag_no, reg_date)
	    SELECT A.* FROM (
	    <foreach item="item" collection="list" separator="UNION ALL" >
			select #{item.board_no} BOARD_NO,
	        (select tag_no from tbl_tag
			 where tag_name = #{item.tag_name}) TAG_NO,
			(select reg_date from tbl_board
			 where board_no = #{item.board_no}) REG_DATE
	        from dual
	    </foreach>) A
	</insert>
	
	<!-- 1-3. place -->
	<!-- tbl_place insert -->
	<update id="insertPlace" parameterType="BoardPlace">
		MERGE INTO tbl_place A
		USING (
				SELECT
					#{place_no} as place_no,
					#{place_name} as place_name,
					#{place_address} as place_address,
					#{place_lat} as place_lat,
					#{place_long} as place_long,
					#{place_id} as place_id,
					#{sort_local} as sort_local,
					#{sub_local} as sub_local,
					#{sort_place} as sort_place
				FROM DUAL
		) B
		ON (A.place_id = B.place_id)
		WHEN MATCHED THEN
		UPDATE 
			SET A.ment_cnt = A.ment_cnt + 1
			WHERE A.place_id = B.place_id
		WHEN NOT MATCHED THEN
		INSERT (
			place_no,
			place_name,
			place_address,
			place_lat,
			place_long,
			place_id,
			sort_local,
			sub_local,
			sort_place,
			ment_cnt
		)
		VALUES (
			seq_place_no.nextval,
			B.place_name,
			B.place_address,
			B.place_lat,
			B.place_long,
			B.place_id,
			B.sort_local,
			B.sub_local,
			B.sort_place,
			1
		)
	</update>
	<!-- tbl_board_place insert -->
	<insert id="insertBoardPlace"  parameterType="BoardPlace">
		INSERT INTO 
			tbl_board_place (board_no, place_no)
	    SELECT A.* FROM (
			select #{board_no} BOARD_NO,
	        (select place_no from tbl_place
			 where place_id = #{place_id}) PLACE_NO
	        from dual
	         ) A
	</insert>
	<!-- 1-4. img -->
	<insert id="insertBoardImg" parameterType="java.util.List">
		INSERT INTO tbl_board_img
		SELECT seq_img_no.NEXTVAL, A.* FROM (
			<foreach collection="list" item="item" separator="UNION ALL">
				SELECT #{item.board_no} BOARD_NO,
					   #{item.img_path} IMG_PATH,
					   #{item.img_name} IMG_NAME
				FROM DUAL
			</foreach>
			)A
	</insert>

<!-- ************READ************ -->
<!-- 1. 상세보기 -->
	<!-- 1-1. -->
	<select id="selectBoard" resultType="Board">
		SELECT 
		    a.*, b.sort_name sortLocalName, c.sort_name subLocalName,
		    d.sort_name sortBoardName, e.sort_name sortPlaceName,
		    f.user_nick userNick, f.user_img userImg
		    <if test = "login_id != null">
			, bl.board_no likeBoard, bm.board_no bmBoard
			</if>
		FROM tbl_board a
		JOIN tbl_sort_local b ON a.sort_local = b.sort_no
		JOIN tbl_sort_local c ON a.sub_local = c.sort_no
		JOIN tbl_sort_board d ON a.sort_board = d.sort_no
		LEFT OUTER JOIN tbl_sort_place e ON a.sort_place = e.sort_no 
		<if test = "login_id != null">
		LEFT OUTER JOIN tbl_like bl ON bl.user_id = #{login_id} AND bl.board_no = #{board_no}
		LEFT OUTER JOIN tbl_bookmark bm ON bm.user_id = #{login_id} AND bm.board_no = #{board_no}
		</if>
		JOIN tbl_member f ON a.user_id = f.user_id
		WHERE a.board_no = #{board_no} and a.is_del = 'N'
	</select>
	
	<!-- 1-2. -->
	<select id="selectBoardTag" resultType="BoardTag">
		select A.board_no, B.*
		from tbl_board_tag A, tbl_tag B 
		where A.board_no = #{board_no} and A.tag_no = B.tag_no
	</select>
	<!-- 1-3. -->
	<select id="selectBoardPlace" resultType="BoardPlace">
		select A.board_no, B.*
		from tbl_board_place A, tbl_place B
		where A.board_no = #{board_no} and A.place_no = B.place_no
	</select>
<!-- 2.카테고리 -->
	<select id="selectSortLocal" resultType="Sort">
 		SELECT * FROM tbl_sort_local
 		order by sort_name asc
 	</select>
	<select id="selectSortBoard" resultType="Sort">
 		SELECT * FROM tbl_sort_board
 		order by has_sort_place desc, sort_no asc
 	</select>
	<select id="selectSortPlace" resultType="Sort">
 		SELECT * FROM tbl_sort_place
 		order by sort_name asc
 	</select>
 	<select id="selectSortLocalPByEngName" resultType="Sort">
 		SELECT * FROM tbl_sort_local
 		where eng_name = #{eng_name}
 	</select>
 <!-- 3. tag 비동기 자동완성 -->
 	<select id="searchTag" resultType="BoardTag">
 		select * from tbl_tag
        where tag_name like '%'||#{keyword}||'%'
 	</select>
<!-- 3. 글목록 -->	
<!-- 글전체 개수 -->
 	<select id="getBoardListCount" resultType="int">
 		SELECT count(*)
		FROM tbl_board a
		JOIN tbl_sort_local b ON a.sort_local = b.sort_no
		JOIN tbl_sort_local c ON a.sub_local = c.sort_no
		JOIN tbl_sort_board d ON a.sort_board = d.sort_no
		LEFT OUTER JOIN tbl_sort_place e ON a.sort_place = e.sort_no 
		JOIN tbl_member f ON a.user_id = f.user_id
		LEFT OUTER JOIN (select a.*, b.board_no  from tbl_place a, tbl_board_place b
                        where a.place_no = b.place_no) g ON a.board_no = g.board_no 
		<include refid="search"></include>
 	</select>
 	
 	<select id="selectBoardList" resultType="Board">
 		SELECT * 
		FROM (SELECT ROWNUM rnum, A.*
				 FROM ( SELECT a.*, b.sort_name sortLocalName, c.sort_name subLocalName,
					    d.sort_name sortBoardName, e.sort_name sortPlaceName,
					    f.user_nick userNick, g.place_name placeName, g.place_address placeAddress
					    <if test = "login_id != null">
						, bl.board_no likeBoard, bm.board_no bmBoard
						</if>
						FROM tbl_board a
						JOIN tbl_sort_local b ON a.sort_local = b.sort_no
						JOIN tbl_sort_local c ON a.sub_local = c.sort_no
						JOIN tbl_sort_board d ON a.sort_board = d.sort_no
						LEFT OUTER JOIN tbl_sort_place e ON a.sort_place = e.sort_no 
						JOIN tbl_member f ON a.user_id = f.user_id
						LEFT OUTER JOIN (select a.*, b.board_no  from tbl_place a, tbl_board_place b
                        where a.place_no = b.place_no) g ON a.board_no = g.board_no 
						<if test = "login_id != null">
						LEFT OUTER JOIN tbl_like bl ON bl.user_id = #{login_id} AND bl.board_no = #{board_no}
						LEFT OUTER JOIN tbl_bookmark bm ON bm.user_id = #{login_id} AND bm.board_no = #{board_no}
						</if>
				 		<include refid="search"></include> ) A )
		WHERE rnum BETWEEN #{startRow} AND #{endRow} 
 	</select>
 	
 	<sql id="search">
 		WHERE is_del = 'N' AND is_notice = 'N' AND b.eng_name = #{sortLocalEngName}
 		<!-- 검색 -->
 		<if test="searchType != null">
			<choose>
				<when test='searchType == "tc"'>
					AND (a.board_title like '%' || #{keyword} || '%'
					or  a.board_content like '%' || #{keyword} || '%')
				</when>
				<when test='searchType == "t"'>
					AND a.board_title like '%' || #{keyword} || '%'
				</when>
				<when test='searchType == "w"'>
					AND (f.user_nick like '%' || #{keyword} || '%'
					or  a.user_id like '%' || #{keyword} || '%')
				</when>
				<when test='searchType == "p"'>
					AND (g.place_name like '%' || #{keyword} || '%'
					or  g.place_address like '%' || #{keyword} || '%')
				</when>
			</choose>
		</if>
		<!-- 게시판별 -->
		<if test="sortBoard != null and sortBoard != 'all'">
			AND a.sort_board = #{sortBoard}
		</if>
		<!-- 소지역별 -->
		<if test="subLocal != null and subLocal != 'all'">
			AND a.sub_local = #{subLocal}
		</if>
		<!-- 말머리별 -->
		<if test="sortPlace != null and sortPlace != 'all'">
			AND a.sort_place = #{sortPlace}
		</if>
		
		<!-- 정렬 -->
 		<if test="order != null">
 			<choose> 
				<when test="order == 'like'">
					ORDER BY a.like_cnt DESC, a.board_no DESC
				</when>
				<when test="order == 'date'">
					ORDER BY a.reg_date DESC
				</when>
				<when test="order =='view'">
					ORDER BY a.view_cnt DESC, a.board_no DESC
				</when>
				<when test="order =='cmt'">
					ORDER BY a.cmt_cnt DESC, a.board_no DESC
				</when>
			</choose>
 		</if>
 		<if test="order == null">
 			ORDER BY a.board_no DESC
 		</if>
	</sql>
 	
<!-- ************UPDATE************ -->
	<!-- 1-1. board -->
	<update id="updateBoard" parameterType="Board">
 		UPDATE tbl_board
 		SET board_title = #{board_title},
 			board_content = #{board_content},
 			sort_local = #{sort_local},
 			sub_local = #{sub_local},
 			sort_board = #{sort_board},
 			has_img = #{has_img},
 			mod_date = sysdate
 		WHERE board_no = #{board_no}
	</update>
	<!-- 1-2. boardPlace -->
	<update id="updateBoardPlace"  parameterType="BoardPlace">
		UPDATE tbl_board_place
	    SET place_no = (select place_no from tbl_place
			 			where place_id = #{place_id})
		WHERE board_no = #{board_no}
	</update>
	<!-- 1-3. tag -->
	<delete id="deleteBoardTag"  parameterType="java.util.List">
		DELETE FROM tbl_board_tag
		<where>
			<foreach collection="list" item="item" open="" close="" separator="OR">
				(board_no = #{item.board_no} and tag_no = ${item.tag_no})
			</foreach>
		</where>
	</delete>
	<!-- 1-4. boardImg -->
	<select id="selectBoardImg" resultType="BoardImg">
		select * from tbl_board_img
		where board_no = #{board_no}
	</select>
	<delete id="deleteBoardImg"  parameterType="int">
		DELETE FROM tbl_board_img
		WHERE board_no = #{board_no}
	</delete>
	
	<!-- 조회수 증가-->
	<update id="updateViewCnt">
		UPDATE tbl_board
		SET view_cnt = view_cnt + 1
		WHERE board_no = #{board_no} 
	</update>
	<!-- 댓글수 증가 -->
	<update id="updateCmtCnt">
		UPDATE tbl_board
		SET cmt_cnt = cmt_cnt + #{count}
		WHERE board_no = #{board_no} 
	</update>
	<!-- 댓글수 증가 -->
	<update id="updateLikeCnt">
		UPDATE tbl_board
		SET like_cnt = like_cnt + #{count}
		WHERE board_no = #{board_no} 
	</update>
<!-- ************DELETE************ -->
	<!-- 글삭제 -->
	<update id="deleteBoard">
		UPDATE tbl_board
		SET is_del = 'Y'
		WHERE board_no = #{board_no}
	</update>
	
<!-- 좋아요, 북마크 -->
<!-- 좋아요 -->
	<!-- 좋아요 테이블 -->
	<insert id="insertLike">
		insert into tbl_like
		SELECT A.* FROM (
	        select #{user_id} USER_ID,
	        	   #{board_no} BOARD_NO
	        from dual
	         WHERE NOT EXISTS
			(
			  SELECT
			  *
			  FROM
			  tbl_like
			  WHERE
			  user_id = #{user_id} and board_no = #{board_no}
			)
	    ) A
	</insert>
	<delete id="deleteLike">
		delete from tbl_like
		where board_no = #{board_no} and user_id = #{user_id}
	</delete>
	
	<!-- 북마크 -->
	<insert id="insertBookmark">
		insert into tbl_bookmark
		SELECT A.* FROM (
	        select #{user_id} USER_ID,
	        	   #{board_no} BOARD_NO
	        from dual
	         WHERE NOT EXISTS
			(
			  SELECT
			  *
			  FROM
			  tbl_bookmark
			  WHERE
			  user_id = #{user_id} and board_no = #{board_no}
			)
	    ) A
	</insert>
	
	<delete id="deleteBookmark">
		delete from tbl_bookmark
		where board_no = ${board_no} and user_id = #{user_id}
	</delete>
	
</mapper>